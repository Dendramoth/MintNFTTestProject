{"version":3,"sources":["util/interact.js","MintApplication.js","alchemylogo.svg","App.js","reportWebVitals.js","index.js"],"names":["require","config","web3","createAlchemyWeb3","process","contractABI","contractAddress","mintNFTContract","eth","Contract","loadNFTCollectionName","a","methods","name","call","message","connectWallet","window","ethereum","request","method","addressArray","obj","status","address","target","href","getCurrentWalletConnected","length","mintNFT","amount","transactionParameters","to","from","data","publicMint","encodeABI","value","params","txHash","MintApplication","useState","walletAddress","setWallet","setStatus","setMessage","newMessage","setNewMessage","addWalletListener","on","accounts","useEffect","fetchNFTCollectionName","fetchWallet","connectWalletPressed","walletResponse","onUpdatePressed","id","onClick","String","substring","style","paddingTop","type","placeholder","onChange","e","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b58bddc6.chunk.js","sourcesContent":["require('dotenv').config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey); \n\nconst contractABI = require('../contract-abi.json')\nconst contractAddress = \"0x4Ebe01e3D58ceD41fcf19005392173B6Ab9F6660\";\n\nexport const mintNFTContract = new web3.eth.Contract(\n  contractABI,\n  contractAddress\n);\n\nexport const loadNFTCollectionName = async () => { \n   const message = await mintNFTContract.methods.name().call(); \n   return message;\n};\n\nexport const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const obj = {\n          status: \"👆🏽 Enter amount of NFTs to mint.\",\n          address: addressArray[0],\n        };\n        return obj;\n      } catch (err) {\n        return {\n          address: \"\",\n          status: \"😥 \" + err.message,\n        };\n      }\n    } else {\n      return {\n        address: \"\",\n        status: (\n          <span>\n            <p>\n              {\" \"}\n              🦊{\" \"}\n              <a target=\"_blank\" href={`https://metamask.io/download`}>\n                You must install Metamask, a virtual Ethereum wallet, in your\n                browser.\n              </a>\n            </p>\n          </span>\n        ),\n      };\n    }\n  };\n\nexport const getCurrentWalletConnected = async () => {\n    if (window.ethereum) {\n        try {\n          const addressArray = await window.ethereum.request({\n            method: \"eth_accounts\",\n          });\n          if (addressArray.length > 0) {\n            return {\n              address: addressArray[0],\n              status: \"👆🏽 Enter amount of NFTs to mint.\",\n            };\n          } else {\n            return {\n              address: \"\",\n              status: \"🦊 Connect to Metamask using the top right button.\",\n            };\n          }\n        } catch (err) {\n          return {\n            address: \"\",\n            status: \"😥 \" + err.message,\n          };\n        }\n      } else {\n        return {\n          address: \"\",\n          status: (\n            <span>\n              <p>\n                {\" \"}\n                🦊{\" \"}\n                <a target=\"_blank\" href={`https://metamask.io/download`}>\n                  You must install Metamask, a virtual Ethereum wallet, in your\n                  browser.\n                </a>\n              </p>\n            </span>\n          ),\n        };\n      }\n};\n\nexport const mintNFT = async (address, amount) => {\n  //input error handling\n  if (!window.ethereum || address === null) {\n    return {\n      status:\n        \"💡 Connect your Metamask wallet to update the message on the blockchain.\",\n    };\n  }\n\n  if (amount <= 0) {\n    return {\n      status: \"❌ You have to mint at least one NFT.\",\n    };\n  }\n\n  //set up transaction parameters\n  const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: address, // must match user's active address.\n    data: mintNFTContract.methods.publicMint(address, amount).encodeABI(),\n    value: \"0x354A6BA7A18000\"\n  };\n\n  //sign the transaction\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n    });\n    return {\n      status: (\n        <span>\n          ✅{\" \"}\n          <a target=\"_blank\" href={`https://goerli.etherscan.io/tx/${txHash}`}>\n            View the status of your transaction on Etherscan!\n          </a>\n          <br />\n          ℹ️ Once the transaction is verified by the network, the message will\n          be updated automatically.\n        </span>\n      ),\n    };\n  } catch (error) {\n    return {\n      status: \"😥 \" + error.message,\n    };\n  }\n};\n","import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport {\n  mintNFTContract,\n  connectWallet,\n  mintNFT,\n  loadCurrentMessage,\n  getCurrentWalletConnected,\n  loadNFTCollectionName,\n} from \"./util/interact.js\";\n\nimport alchemylogo from \"./alchemylogo.svg\";\n\nconst MintApplication = () => {\n  //state variables\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [message, setMessage] = useState(\"No connection to the network.\"); //default message\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  //called only once\n  useEffect(async () => {\n    async function fetchNFTCollectionName() {\n      const message = await loadNFTCollectionName();\n      setMessage(message);\n    }\n    fetchNFTCollectionName();\n\n    async function fetchWallet() {\n      const {address, status} = await getCurrentWalletConnected();\n      setWallet(address);\n      setStatus(status); \n    }\n    fetchWallet();\n\n    addWalletListener(); \n  }, []);\n\n  function addSmartContractListener() { //TODO: implement\n    \n  }\n\n  function addWalletListener() { \n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"👆🏽 Enter amount of NFTs to mint.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus(\n        <p>\n          {\" \"}\n          🦊{\" \"}\n          <a target=\"_blank\" href={`https://metamask.io/download`}>\n            You must install Metamask, a virtual Ethereum wallet, in your\n            browser.\n          </a>\n        </p>\n      );\n    }\n  }\n\n  const connectWalletPressed = async () => { \n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  const onUpdatePressed = async () => { \n    const { status } = await mintNFT(walletAddress, 1);\n    setStatus(status);\n  };\n\n  //the UI of our component\n  return (\n    <div id=\"container\">\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\n        {walletAddress.length > 0 ? (\n          \"Connected: \" +\n          String(walletAddress).substring(0, 6) +\n          \"...\" +\n          String(walletAddress).substring(38)\n        ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n\n      <h2 style={{ paddingTop: \"50px\" }}>NFT Project name (read from Smart Contract):</h2>\n      <p>{message}</p>\n\n      <h2 style={{ paddingTop: \"18px\" }}>Mint NFT:</h2>\n\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Enter amount of NFTs to mint. (Currently is supported just one at a time)\"\n          onChange={(e) => setNewMessage(e.target.value)}\n          value={newMessage}\n        />\n        <p id=\"status\">{status}</p>\n\n        <button id=\"publish\" onClick={onUpdatePressed}>\n          MINT\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default MintApplication;\n","export default __webpack_public_path__ + \"static/media/alchemylogo.f670e5f2.svg\";","import MintApplication from './MintApplication'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <MintApplication></MintApplication>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}